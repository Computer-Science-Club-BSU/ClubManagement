<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="-1" />

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Financial Record</title>
    <script src="/static/finances/new/script.js" defer></script>
    <link rel="stylesheet" href="/static/finances/new/style.css">

    <script>
        let users = [], approvers = [];
        let rowid = 1 + {{ lines | size }}
        function addRow(){
            let table = document.getElementById("prods");
            let row = table.insertRow();
            row.innerHTML = `
                <td style='display: none' id="ItemNum${rowid}"></td>
                <td>${rowid}</td>
                <td><input disabled type="text" id="ItemInfo${rowid}" id="ItemInfo" style='width:80%'><button onclick='searchItem(${rowid})'><i class="fa-solid fa-magnifying-glass"></i></button></td>
                <td><input disabled type="text" id="ItemPrice${rowid}" style="width: 100px;"></td>
                <td><input onchange="updateGrandTotal()" style="width: 90%;" type="number" name="Quantity" id="Quantity${rowid}"></td>
                <td><input type="number" name="Total" style="width: 100px;" id="Total${rowid}" disabled></td>
            `;
            rowid++
        }
        function searchItem(rowID){
            // Open a new window to search for an item
            // The item will be selected and the window will close
            let invDate = document.getElementById("RecordDate").value;
            if (invDate === ""){
                alert("Please select a date for the invoice");
                return;
            }
            let item = window.open(`/finance/items/search?invDate=${invDate}`, "ItemSearch", "width=800,height=600");
            item.callback = (doc, seq) => {
              document.getElementById(`ItemInfo${rowID}`).value = doc.getElementById(`item_name${seq}`).innerText
              document.getElementById(`ItemPrice${rowID}`).value = doc.getElementById(`item_price${seq}`).innerText
              document.getElementById(`ItemNum${rowID}`).innerText = seq
            }  
          }

        function openTab(evt, cityName) {
          // Declare all variables
          var i, tabcontent, tablinks;
          console.log(evt.currentTarget.className)

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the button that opened the tab
            document.getElementById(cityName).style.display = "block";
            evt.currentTarget.className += " active";
      }

        function popRow(){
          if(rowid == (1 + {{ lines | size }})) return
            let table = document.getElementById("prods");
            rowid--
            table.deleteRow(rowid);
        }

        function onLoad(){
          document.getElementById('RecordDate').valueAsDate = new Date();
        }

        function getRecordObject(){
            updateGrandTotal()
            let record_object = {
                "header": {
                    "id": document.getElementById("InvoiceID").value,
                    "creator": document.getElementById("Creator").value,
                    "approver": document.getElementById("Approver").value,
                    "status": document.getElementById("Status").value,
                    "inv_date": document.getElementById("RecordDate").value,
                    "type": document.getElementById("Type").value,
                    "tax": parseInt(document.getElementById("Taxes").value).toFixed(2),
                    "fees": parseInt(document.getElementById("Fees").value).toFixed(2),
                    "total": parseInt(document.getElementById("Total").value).toFixed(2)
                },
                "lines": []
            }
            let table = document.getElementById("prods");
            for (let i = 1; i < table.rows.length; i++){
                let line = {
                    "line_id": i,
                    "item_seq": document.getElementById(`ItemNum${i}`).innerText,
                    "item_desc": document.getElementById(`ItemInfo${i}`).value,
                    "item_price": document.getElementById(`ItemPrice${i}`).value,
                    "qty": document.getElementById(`Quantity${i}`).value,
                    "total": document.getElementById(`Total${i}`).value
                }
                record_object.lines.push(line);
            }
            return record_object;
        }

        function previewRecord(){
            let record_object = getRecordObject();
            // XHR POST Request to /finances/new/
            let xhrHTTP = new XMLHttpRequest();
            xhrHTTP.open("POST", "/finances/new/preview/");
            xhrHTTP.setRequestHeader("Content-Type", "application/json");
            xhrHTTP.send(JSON.stringify(record_object));
            xhrHTTP.onreadystatechange = function(){
                console.log(xhrHTTP.readyState, xhrHTTP.status)
                if (xhrHTTP.readyState == 4 && xhrHTTP.status == 200){
                  let record = window.open("/finances/preview", "RecordPreview", "width=800,height=600");
                    record.document.write(xhrHTTP.responseText);
                } else {
                    if(xhrHTTP.readyState == 4 && xhrHTTP.status != 200){
                        alert(xhrHTTP.responseText);
                    }
                }
            }
        }

        function updateRecord(){
          let record_object = getRecordObject();
            // XHR POST Request to /finances/create/
            let xhrHTTP = new XMLHttpRequest();
            xhrHTTP.open("POST", "/finances/edit/{{ header.seq }}");
            xhrHTTP.setRequestHeader("Content-Type", "application/json");
            xhrHTTP.send(JSON.stringify(record_object));
            xhrHTTP.onreadystatechange = function(){
                console.log(xhrHTTP.readyState, xhrHTTP.status)
                if (xhrHTTP.readyState == 4 && xhrHTTP.status == 200){
                    alert("Record Updated!");
                    window.location.href = "/finances/";
                } else {
                    if(xhrHTTP.readyState == 4 && xhrHTTP.status != 200){
                        alert(xhrHTTP.responseText);
                    }
                }
            }
        }

        function createRecord(){
            let record_object = getRecordObject();
            // XHR POST Request to /finances/create/
            let xhrHTTP = new XMLHttpRequest();
            xhrHTTP.open("POST", "/finances/create/");
            xhrHTTP.setRequestHeader("Content-Type", "application/json");
            xhrHTTP.send(JSON.stringify(record_object));
            xhrHTTP.onreadystatechange = function(){
                console.log(xhrHTTP.readyState, xhrHTTP.status)
                if (xhrHTTP.readyState == 4 && xhrHTTP.status == 200){
                    alert("Record Created!");
                    window.location.href = "/finances/";
                } else {
                    if(xhrHTTP.readyState == 4 && xhrHTTP.status != 200){
                        alert(xhrHTTP.responseText);
                    }
                }
            }
        }

        function updateGrandTotal(){
            let table = document.getElementById("prods");
            let total = 0;
            for (let i = 1; i < table.rows.length; i++){
                let price = document.getElementById(`ItemPrice${i}`).value;
                let quantity = document.getElementById(`Quantity${i}`).value;
                if(quantity === "")
                    quantity = 0;
                let subtotal = price * quantity;
                subtotal = subtotal.toFixed(3);
                document.getElementById(`Total${i}`).value = subtotal;
            }
            total = 0;
            for (let i = 1; i < table.rows.length; i++){
                row = parseFloat(document.getElementById(`Total${i}`).value);
                if(!isNaN(row))
                    total += row
                else
                    alert("Please fill in all the fields");
            }
            taxes = parseFloat(document.getElementById("Taxes").value)
            fees = parseFloat(document.getElementById("Fees").value)
            if (isNaN(taxes)){
                taxes = 0;
                document.getElementById("Taxes").value = 0;
            }
            if (isNaN(fees)){
                fees = 0;
                document.getElementById("Fees").value = 0;
            }
            total = total + taxes + fees
            document.getElementById("Total").value = total.toFixed(2);


        }
        function validateRecordDate(){
            // XHR POST Request to /finances/create/validate
            let xhr = new XMLHttpRequest()
            xhr.open('POST', "/finances/create/validate");
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.send(JSON.stringify({
            "recordDate": document.getElementById('RecordDate').value
            }))
            xhr.onreadystatechange = () => {
                if(xhr.readyState == 4){
                    if(xhr.status == 200){
                        if(xhr.responseText != ""){
                            alert(xhr.responseText)
                        }
                    } else {
                        alert("An error has occurred. Please contact your administrators")
                    }
                }
            };
        }


    </script>

  </head>
  <body onload='onLoad()'>
    {% include "navbar.liquid" %}
    <article>
      <div class="grid2x2">
        <div class="box">
          <h1>New Financial Record</h1>
          <div class="tab">
            <button class="tablinks active" onclick="openTab(event, 'Setup')">Header</button>
            <button class="tablinks" onclick="openTab(event, 'Table')">Lines</button>
            <button class="tablinks" onclick="openTab(event, 'Settings')">Review</button>
          </div>

          <!-- Tab content -->
          <div
            id="Setup"
            class="tabcontent"
            style="display:block;">
            <h3>Finances Header</h3>
            <fieldset>
              <!-- Should contain settings pertaining to:
                Invoice ID
                Creator
                Approver
                Invoice Date
                Status
                Type -->
              <label for="InvoiceID">Invoice ID:</label>
              <input
                type="text"
                name="invoiceID"
                id="InvoiceID" value="{{ header.id }}">
              <br> <br>
              <label for="Creator">Creator:</label>
              <select name="Creator" id="Creator">
                {% for fuser in finance_users %}
                  <option value="{{ fuser.seq }}" {% if fuser.seq == header.created_by %} selected {% endif %}>{{ fuser.first_name }} {{ fuser.last_name }}</option>
                {% endfor %}
              </select>
              <br>
              <label for="Approver">Approver:</label>
              <select name="Approver" id="Approver">

                <option value="" {% if header.approved_by == nil %} selected {% endif %}>Not Approved</option>

                {% for fuser in approvers %}
                  {% if fuser.seq != user.seq %}
                    <option value="{{ fuser.seq }}" {% if fuser.seq == header.approved_by %} selected {% endif %}>{{ fuser.first_name }} {{ fuser.last_name }}</option>
                  {% endif %}
                {% endfor %}
              </select>

              <br> <br>
              <label for="RecordDate">Record Date:</label>
              <input
                type="date"
                name="RecordDate"
                id="RecordDate" value="{{ header.inv_date }}" onfocusout="validateRecordDate()">
              <br> <br>
              <label for="Status">Status:</label>
              <select name="Status" id="Status">
                {% for status in statuses %}
                  <option value="{{ status.seq }}" {% if status.stat_desc == header.status %}
                    selected
                  {% endif %}>{{ status.stat_desc }}</option>
                {% endfor %}
              </select>
              <br>
              <label for="Type">Type:</label>
              <select name="Type" id="Type">
                {% for type in finance_types %}
                  <option value="{{ type.seq }}" {% if type.type_desc == header.type %}
                    selected
                  {% endif %}>{{ type.type_desc }}</option>
                {% endfor %}
              </select>
            </fieldset>
          </div>


          <div
            id="Table"
            class="tabcontent"
            style="display:none;">
            <h3>Finances Line</h3>
            <fieldset>
              <!-- Should contain settings pertaining to:
                Line ID [Unchangeable]
                Item Info
                Quantity
                Total [Unchangeable]
              -->
              <table id="prods">
                <thead>
                  <tr>
                    <th style="width: 5%">Line</th>
                    <th style="width: 30%;">Item Info</th>
                    <th style="width: 10%;">Item Price</th>
                    <th style="width: 5%;">Quantity</th>
                    <th style="width: 10%">Total</th>
                  </tr>
                </thead>
                <tbody>
                {% for line in lines%}
                  <tr>
                      <td style="display: none" id="ItemNum1">{{ line.item_id }}</td>
                      <td>1</td>
                      <td><input disabled="" type="text" id="ItemInfo1" style="width:80%" value="{{ line.item_desc }}"><button onclick="searchItem(1)"><i class="fa-solid fa-magnifying-glass" aria-hidden="true"></i></button></td>
                      <td><input disabled="" type="text" id="ItemPrice1" style="width: 100px;" value="{{ line.item_price }}"></td>
                      <td><input onchange="updateGrandTotal()" style="width: 90%;" type="number" name="Quantity" id="Quantity1" value="{{ line.qty }}"></td>
                      <td><input type="number" name="Total" style="width: 100px;" id="Total1" disabled="" value="{{ line.total }}"></td>
                  </tr>
                {% endfor %}
                </tbody>
              </table>
              <button onclick="addRow()">Add Row</button>
              <button onclick="updateGrandTotal()">Update Total</button>
              <button onclick="popRow()">Remove Last Row</button>
            </fieldset>

          </div>

          <div
            id="Settings"
            class="tabcontent"
            style="display:none;">
            <h3>Review</h3>
            <fieldset>
              <!-- Should contain settings pertaining to:
                Taxes
                Fees
              -->
              <label for="Taxes">Taxes:</label>
              <input
                type="number"
                name="Taxes"
                id="Taxes"
                style="width: 100px;" value="{{ header.tax }}">
              <br> <br>
              <label for="Fees">Fees:</label>
              <input
                type="number"
                name="Fees"
                id="Fees"
                style="width: 100px;" value="{{ header.fees }}">
              <br> <br>
              <label for="Total">Total:</label>
              <input
                type="number"
                name="Total"
                id="Total"
                disabled
                style="width: 100px;" value="{{ header.total }}">
            </fieldset>
            <button onclick="updateGrandTotal()">Update Grand Total</button>
            <br> <br>
            <button onclick="previewRecord()">Preview</button>
            {% if header == nil %}
            <button onclick="createRecord()">Create Record</button>
            {% else %}
              <button onclick="updateRecord()">Update Record</button>
            {% endif %}
          </div>

        </div>
        <div class="box">
          <div id="preview"></div>
        </div>
      </div>


    </article>
    {% include "footer.liquid" %}

    <style>


      table,
      th,
      td {
        border: 1px solid;
      }
      th {
        border-bottom: 2px solid;
      }
      table {
        border-collapse: collapse;
      }
      td {
        width: 40px;
      }
      .preview {
        all: unset
      }
    </style>

  </body>
</html>
